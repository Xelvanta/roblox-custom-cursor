# -*- coding: utf-8 -*-

import os
import socket
import sys
import struct
import tkinter as tk
from tkinter import messagebox

MAGIC_HEADER = b"RCUR\x00"
EXPECTED_VERSION = 2
CURSOR_FILENAMES = ["ArrowFarCursor.png", "ArrowCursor.png", "IBeamCursor.png"]

def find_valid_roblox_version_folder():
    local_appdata = os.environ.get("LOCALAPPDATA")
    versions_path = os.path.join(local_appdata, "Roblox", "Versions")

    if not os.path.isdir(versions_path):
        return None

    for subfolder in os.listdir(versions_path):
        full_path = os.path.join(versions_path, subfolder)
        content_path = os.path.join(full_path, "content")
        exe_path = os.path.join(full_path, "RobloxPlayerBeta.exe")

        if os.path.isdir(content_path) and os.path.isfile(exe_path):
            return full_path

    return None

def import_cursors_from_rcur(rcur_path):
    folder = find_valid_roblox_version_folder()
    if not folder:
        messagebox.showerror("Roblox Folder Not Found", "Unable to locate a valid Roblox installation folder.")
        return

    cursor_paths = [
        os.path.join(folder, "content", "textures", "Cursors", "KeyboardMouse", fn)
        for fn in CURSOR_FILENAMES
    ]

    try:
        with open(rcur_path, "rb") as f:
            magic = f.read(5)
            if magic != MAGIC_HEADER:
                raise ValueError(
                    "The selected .rcur file is using a legacy format (base64). Legacy base64-encoded .rcur files are no longer supported."
                )

            version_bytes = f.read(4)
            if len(version_bytes) < 4:
                raise ValueError("The .rcur file is corrupt or incomplete (missing version number).")

            version = struct.unpack("<I", version_bytes)[0]
            if version != EXPECTED_VERSION:
                raise ValueError(f"This .rcur file uses an unsupported version: {version}.")

            lengths = []
            for _ in range(3):
                len_bytes = f.read(4)
                if len(len_bytes) < 4:
                    raise ValueError("The .rcur file is corrupt (missing image length data).")
                lengths.append(struct.unpack("<I", len_bytes)[0])

            for i, length in enumerate(lengths):
                image_data = f.read(length)
                if len(image_data) != length:
                    raise ValueError("The .rcur file is corrupt (incomplete image data).")
                with open(cursor_paths[i], "wb") as img_file:
                    img_file.write(image_data)

        notify_gui_to_refresh()
        messagebox.showinfo("Success", "Cursors imported and applied successfully.")

    except Exception as e:
        messagebox.showerror("Import Failed", str(e))

def notify_gui_to_refresh():
    try:
        with socket.create_connection(("127.0.0.1", 57623), timeout=0.5) as s:
            s.sendall(b"refresh_cursors")
    except (ConnectionRefusedError, socket.timeout, OSError):
        pass  # GUI is not running â€” ignore

def main():
    if len(sys.argv) < 2:
        sys.exit(0)  # Silent exit if no file passed

    file_path = sys.argv[1]
    if not os.path.isfile(file_path):
        sys.exit(0)  # Silent exit for nonexistent file

    # Prevent ghost Tk window popping up
    tk.Tk().withdraw()
    import_cursors_from_rcur(file_path)

if __name__ == "__main__":
    main()
